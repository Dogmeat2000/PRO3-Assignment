syntax = "proto3";
option java_multiple_files = true;

package grpc;

message EmptyMessage {

}


// Animal entity:
message AnimalData {
  int64 animalId = 1;
  string animalWeight = 2;
  string origin = 3;
  string arrival_date = 4;
  repeated AnimalPartId animalPartIds = 5;
}


message AnimalId {
  int64 animalId = 1;
}


message AnimalsData {
  repeated AnimalData animals = 1;
}


// AnimalPart entity:
message AnimalPartData {
  AnimalPartId animalPartId = 1;
  string partWeight = 2;
  PartTypeId partTypeId = 3;
  AnimalId animalId = 4;
  TrayId trayId = 5;
  ProductId productId = 6;
}


message AnimalPartId {
  int64 animalPartId = 1;
}


message AnimalPartsData {
  repeated AnimalPartData animalParts = 1;
}


// Tray entity:
message TrayData {
  TrayId trayId = 1;
  string maxWeight_kilogram = 2;
  string weight_kilogram = 3;
  PartTypeId trayTypeId = 4;
  repeated TrayToProductTransferId transferIds = 5;
  repeated AnimalPartId animalPartIds = 6;
  repeated ProductId productids = 7;
}


message TrayId {
  int64 trayId = 1;
}


message TraysData {
  repeated TrayData trays = 1;
}


// PartType entity:
message PartTypeData {
  PartTypeId partTypeId = 1;
  string partDesc = 2;
  repeated AnimalPartId animalPartIds = 3;
}


message PartTypeId {
  int64 partTypeId = 1;
}


message PartTypesData {
  repeated PartTypeData partTypes = 1;
}


// Product entity:
message ProductData {
  ProductId productId = 1;
  repeated TrayToProductTransferId transferIds = 2;
  repeated TrayId trayIds = 3;
  repeated AnimalPartId animalPartIds = 4;
}


message ProductId {
  int64 productId = 1;
}


message ProductsData {
  repeated ProductData products = 1;
}


// TrayToProductTransfer entity:
message TrayToProductTransferData {
  TrayToProductTransferId transferId = 1;
  TrayId trayId = 2;
  ProductId productId = 3;
}


message TrayToProductTransferId {
  int64 transferId = 1;
}


message TrayToProductTransfersData {
  repeated TrayToProductTransferData transferDataList = 1;
}


service AnimalService {
  // Create:
  rpc registerAnimal(AnimalData) returns (AnimalData);

  // Read:
  rpc readAnimal(AnimalId) returns (AnimalData);

  // Update:
  rpc updateAnimal(AnimalData) returns (EmptyMessage);

  // Delete:
  rpc removeAnimal(AnimalData) returns (EmptyMessage);

  // Get All:
  rpc getAllAnimals(EmptyMessage) returns (AnimalsData);
}


service AnimalPartService {
  // Create:
  rpc registerAnimalPart(AnimalPartData) returns (AnimalPartData);

  // Read:
  rpc readAnimalPart(AnimalPartId) returns (AnimalPartData);
  rpc readAnimalPartsByAnimal_id(AnimalId) returns (AnimalPartsData);
  rpc readAnimalPartsByPartType_id(PartTypeId) returns (AnimalPartsData);
  rpc readAnimalPartsByProduct_id(ProductId) returns (AnimalPartsData);
  rpc readAnimalPartsByTray_id(TrayId) returns (AnimalPartsData);

  // Update:
  rpc updateAnimalPart(AnimalPartData) returns (EmptyMessage);

  // Delete:
  rpc removeAnimalPart(AnimalPartData) returns (EmptyMessage);

  // Get All:
  rpc getAnimalParts(EmptyMessage) returns (AnimalPartsData);
}


service ProductService {
  // Create:
  rpc registerProduct(ProductData) returns (ProductData);

  // Read:
  rpc readProduct(ProductId) returns (ProductData);

  // Update:
  rpc updateProduct(ProductData) returns (EmptyMessage);

  // Delete:
  rpc removeProduct(ProductData) returns (EmptyMessage);

  // Get All:
  rpc getAllProducts(EmptyMessage) returns (ProductsData);
}


service TrayService {
  // Create:
  rpc registerTray(TrayData) returns (TrayData);

  // Read:
  rpc readTray(TrayId) returns (TrayData);

  // Update:
  rpc updateTray(TrayData) returns (EmptyMessage);

  // Delete:
  rpc removeTray(TrayData) returns (EmptyMessage);

  // Get All:
  rpc getAllTrays(EmptyMessage) returns (TraysData);
}


service PartTypeService {
  // Create:
  rpc registerPartType(PartTypeData) returns (PartTypeData);

  // Read:
  rpc readPartType(PartTypeId) returns (PartTypeData);

  // Update:
  rpc updatePartType(PartTypeData) returns (EmptyMessage);

  // Delete:
  rpc removePartType(PartTypeData) returns (EmptyMessage);

  // Get All:
  rpc getAllPartTypes(EmptyMessage) returns (PartTypesData);
}
