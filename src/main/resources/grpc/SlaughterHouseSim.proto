syntax = "proto3";
option java_multiple_files = true;

package grpc;

message EmptyMessage {

}


// Animal entity:
message AnimalData {
  int64 animalId = 1;
  string animalWeight = 2;
  repeated AnimalPartData animalPartList = 3;
}


message AnimalId {
  int64 animalId = 1;
}


message AnimalsData {
  repeated AnimalData animals = 1;
}


// AnimalPart entity:
message AnimalPartData {
  int64 animalPartId = 1;
  int64 partTypeId = 2;
  string partWeight = 3;
  int64 animalId = 4;
  int64 trayId = 5;
}


message AnimalPartId {
  int64 animalPartId = 1;
}


message AnimalPartsData {
  repeated AnimalPartData animalParts = 1;
}


// Tray entity:
message TrayData {
  int64 trayId = 1;
  string maxWeight_kilogram = 2;
  string weight_kilogram = 3;
  repeated AnimalPartId animalParts = 4;
}


message TrayId {
  int64 trayId = 1;
}


message TraysData {
  repeated TrayData trays = 1;
}


// PartType entity:
message PartTypeData {
  int64 partTypeId = 1;
  string partDesc = 2;
}


message PartTypeId {
  int64 partTypeId = 1;
}


message PartTypesData {
  repeated PartTypeData partTypes = 1;
}


// Product entity:
message ProductData {
  int64 productId = 1;
  repeated TrayToProductTransferData trayToProductTransfersList = 2;
  repeated AnimalPartData animalPartList = 3;
}


message ProductId {
  int64 productId = 1;
}


message ProductsData {
  repeated ProductData products = 1;
}


// TrayToProductTransfer entity:
message TrayToProductTransferData {
  TrayData tray = 1;
  ProductData product = 2;
}


message TrayToProductTransferId {
  ProductId productId = 1;
  TrayId trayId = 2;
}


message TrayToProductTransfersData {
  repeated TrayToProductTransferData transferDataList = 1;
}


service SlaughterHouseService {
  // Create:
  rpc registerAnimal(AnimalData) returns (AnimalData);
  rpc registerAnimalPart(AnimalPartData) returns (AnimalPartData);
  rpc registerProduct(ProductData) returns (ProductData);
  rpc registerPartType(PartTypeData) returns (PartTypeData);
  rpc registerTray(TrayData) returns (TrayData);
  //rpc registerTrayToProductTransfer(TrayToProductTransferData) returns (TrayToProductTransferData);

  // Read:
  rpc readAnimal(AnimalId) returns (AnimalData);
  rpc readAnimalPart(AnimalPartId) returns (AnimalPartData);
  rpc readProduct(ProductId) returns (ProductData);
  rpc readPartType(PartTypeId) returns (PartTypeData);
  rpc readTray(TrayId) returns (TrayData);
  //rpc readTrayToProductTransfer(TrayToProductTransferId) returns (TrayToProductTransferData);

  // Update:
  rpc updateAnimal(AnimalData) returns (EmptyMessage);
  rpc updateAnimalPart(AnimalPartData) returns (EmptyMessage);
  rpc updateProduct(ProductData) returns (EmptyMessage);
  rpc updatePartType(PartTypeData) returns (EmptyMessage);
  rpc updateTray(TrayData) returns (EmptyMessage);
  //rpc updateTrayToProductTransfer(TrayToProductTransferData) returns (EmptyMessage);

  // Delete:
  rpc removeAnimal(AnimalData) returns (EmptyMessage);
  rpc removeAnimalPart(AnimalPartData) returns (EmptyMessage);
  rpc removeProduct(ProductData) returns (EmptyMessage);
  rpc removePartType(PartTypeData) returns (EmptyMessage);
  rpc removeTray(TrayData) returns (EmptyMessage);
  //rpc removeTrayToProductTransfer(TrayToProductTransferId) returns (EmptyMessage);

  // Get All:
  rpc getAllAnimals(EmptyMessage) returns (AnimalsData);
  rpc getAnimalParts(EmptyMessage) returns (AnimalPartsData);
  rpc getAllProducts(EmptyMessage) returns (ProductsData);
  rpc getAllPartTypes(EmptyMessage) returns (PartTypesData);
  rpc getAllTrays(EmptyMessage) returns (TraysData);
  //rpc getAllTrayToProductTransfers(EmptyMessage) returns (TrayToProductTransfersData);
}