package client.ui.Model.service;

import client.interfaces.AnimalPartRegistrationSystem;
import grpc.*;
import io.grpc.ManagedChannel;
import io.grpc.StatusRuntimeException;
import org.springframework.transaction.annotation.Transactional;
import server.controller.grpc.GrpcFactory;
import server.controller.grpc.grpc_to_java.*;
import server.controller.grpc.java_to_gRPC.AnimalPart_ToGrpc_AnimalPartData;
import server.controller.grpc.java_to_gRPC.LongId_ToGrpc_Id;
import shared.model.entities.*;
import shared.model.exceptions.CreateFailedException;
import shared.model.exceptions.DeleteFailedException;
import shared.model.exceptions.NotFoundException;
import shared.model.exceptions.UpdateFailedException;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import static io.grpc.Status.INTERNAL;
import static io.grpc.Status.NOT_FOUND;

public class AnimalPartRegistrationSystemImpl extends Client implements AnimalPartRegistrationSystem
{
  public AnimalPartRegistrationSystemImpl(String host, int port) {
    super(host, port);
  }


  @Transactional
  @Override
  public AnimalPart registerNewAnimalPart(Animal animal, PartType type, Tray tray, BigDecimal weightInKilogram) throws CreateFailedException {
    // Create a managed channel to connect to the gRPC server:
    ManagedChannel channel = channel();

    try {
      // Create a BlockingStub, which is auto-generated by the proto file, and in essence is the client connection manager!
      AnimalPartServiceGrpc.AnimalPartServiceBlockingStub animalPartStub = AnimalPartServiceGrpc.newBlockingStub(channel);

      // Create a gRPC compatible version of AnimalPart (AnimalPartData)
      AnimalPartData data = GrpcFactory.buildGrpcAnimalPartData(1, animal, type, tray, weightInKilogram);

      // Prompt gRPC to register the AnimalPart:
      AnimalPartData createdAnimalPartData = animalPartStub.registerAnimalPart(data);

      // Populate AnimalPart with the proper relationships, to have a proper Object Relational Model.
      // Object relations are lost during gRPC conversion (due to cyclic relations, i.e. AnimalPart and Animal have relations to each other), so must be repopulated:
      return readAnimalPart(createdAnimalPartData.getAnimalPartId().getAnimalPartId());

    } catch (StatusRuntimeException e) {
      throw new CreateFailedException("Failed to register AnimalPart with weight '" + weightInKilogram + "' (" + e.getMessage() + ")");
    } finally {
      // Always shut down the channel after use, to reduce server congestion and 'application hanging'.
      channel.shutdown();
    }
  }


  @Transactional
  @Override
  public AnimalPart readAnimalPart(long animalPartId) throws NotFoundException {
    // Create a managed channel to connect to the gRPC server:
    ManagedChannel channel = channel();

    try {
      // Create a BlockingStub, which is auto-generated by the proto file, and in essence is the client connection manager!
      AnimalPartServiceGrpc.AnimalPartServiceBlockingStub animalPartStub = AnimalPartServiceGrpc.newBlockingStub(channel);
      AnimalServiceGrpc.AnimalServiceBlockingStub animalStub = AnimalServiceGrpc.newBlockingStub(channel);
      PartTypeServiceGrpc.PartTypeServiceBlockingStub partTypeStub = PartTypeServiceGrpc.newBlockingStub(channel);
      ProductServiceGrpc.ProductServiceBlockingStub productStub = ProductServiceGrpc.newBlockingStub(channel);
      TrayServiceGrpc.TrayServiceBlockingStub trayStub = TrayServiceGrpc.newBlockingStub(channel);

      // Create a gRPC compatible version of AnimalPart (AnimalPartId):
      AnimalPartId id = LongId_ToGrpc_Id.convertToAnimalPartId(animalPartId);

      // Prompt gRPC to read the AnimalPart:
      AnimalPartData foundAnimalPart = animalPartStub.readAnimalPart(id);

      // Convert the AnimalData that was read from the DB into a java compatible format:
      AnimalPart animalPart = GrpcAnimalPartData_To_AnimalPart.convertToAnimalPart(foundAnimalPart);

      // Populate AnimalPart with the proper relationships, to have a proper Object Relational Model.
      // Object relations are lost during gRPC conversion (due to cyclic relations, i.e. both AnimalPart and Animal have relations to each other), so must be repopulated:
      try {
        // Read the Animal associated with this AnimalPart:
        AnimalData animalData = animalStub.readAnimal(LongId_ToGrpc_Id.convertToAnimalId(foundAnimalPart.getAnimal().getAnimalId()));

        // Convert to java language, and attach to AnimalPart Object:
        animalPart.setAnimal(GrpcAnimalData_To_Animal.convertToAnimal(animalData));
      } catch (StatusRuntimeException e) {
        if(!e.getStatus().getCode().equals(NOT_FOUND.getCode()))
          // No Animal found assigned to this AnimalPart:
          throw new RuntimeException("Critical Error encountered. Failed to Query the Animal associated with AnimalPart_id '" + animalPartId + "' (" + e.getMessage() + ")");
      }

      try {
        // Read the Tray associated with this AnimalPart:
        TrayData trayData = trayStub.readTray(LongId_ToGrpc_Id.convertToTrayId(foundAnimalPart.getTray().getTrayId()));

        // Convert to java language, and attach to AnimalPart Object:
        animalPart.setTray(GrpcTrayData_To_Tray.convertToTray(trayData));
      } catch (StatusRuntimeException e) {
        if(!e.getStatus().getCode().equals(NOT_FOUND.getCode()))
          // No Tray found assigned to this AnimalPart:
          throw new RuntimeException("Critical Error encountered. Failed to Query the Tray associated with AnimalPart_id '" + animalPartId + "' (" + e.getMessage() + ")");
      }

      try {
        // Read the PartType associated with this AnimalPart:
        PartTypeData partTypeData = partTypeStub.readPartType(LongId_ToGrpc_Id.convertToPartTypeId(foundAnimalPart.getPartType().getPartTypeId()));

        // Convert to java language, and attach to AnimalPart Object:
        animalPart.setType(GrpcPartTypeData_To_PartType.convertToPartType(partTypeData));
      } catch (StatusRuntimeException e) {
        if(!e.getStatus().getCode().equals(NOT_FOUND.getCode()))
          // No PartType found assigned to this AnimalPart:
          throw new RuntimeException("Critical Error encountered. Failed to Query the Tray associated with AnimalPart_id '" + animalPartId + "' (" + e.getMessage() + ")");
      }

      if(animalPart.getProduct() != null && animalPart.getProduct().getProductId() != 0)  {
        try {
          // Read the Product associated with this AnimalPart:
          ProductData productData = productStub.readProduct(LongId_ToGrpc_Id.convertToProductId(foundAnimalPart.getProduct().getProductId()));

          // Convert to java language, and attach to AnimalPart Object:
          animalPart.setProduct(GrpcProductData_To_Product.convertToProduct(productData));
        } catch (StatusRuntimeException e) {
          if(!e.getStatus().getCode().equals(NOT_FOUND.getCode()))
            // No Product found assigned to this AnimalPart:
            throw new RuntimeException("Critical Error encountered. Failed to Query the Product associated with AnimalPart_id '" + animalPartId + "' (" + e.getMessage() + ")");
        }
      }

      // Return:
      return animalPart;

    } catch (StatusRuntimeException e) {
      throw new NotFoundException("No animalPart found with id '" + animalPartId + "' (" + e.getMessage() + ")");
    } finally {
      // Always shut down the channel after use, to reduce server congestion and 'application hanging'.
      channel.shutdown();
    }
  }


  @Transactional
  @Override
  public List<AnimalPart> readAnimalPartsByAnimalId(long animalId) throws NotFoundException {
    // Create a managed channel to connect to the gRPC server:
    ManagedChannel channel = channel();

    try {
      // Create a BlockingStub, which is auto-generated by the proto file, and in essence is the client connection manager!
      AnimalPartServiceGrpc.AnimalPartServiceBlockingStub animalPartStub = AnimalPartServiceGrpc.newBlockingStub(channel);

      // Prompt gRPC to retrieve the AnimalParts from Database:
      AnimalPartsData animalPartsData = animalPartStub.readAnimalPartsByAnimalId(LongId_ToGrpc_Id.convertToAnimalId(animalId));

      // Read each entity individually (should be using the cached version now), to get all the proper entity relations:
      List<AnimalPart> animalParts = new ArrayList<>();
      for (AnimalPart animalPart : GrpcAnimalPartData_To_AnimalPart.convertToAnimalPartList(animalPartsData))
        animalParts.add(readAnimalPart(animalPart.getPart_id()));

      return animalParts;

    } catch (StatusRuntimeException e) {
      if(e.getStatus().getCode().equals(NOT_FOUND.getCode()))
        throw new NotFoundException("No AnimalParts associated with animal_id '" + animalId + "' found in database");
      else
        throw new RuntimeException("Critical Error encountered. Failed to Query for all AnimalParts associated with animal_id '" + animalId + "' from the Database (" + e.getMessage() + ")");
    } finally {
      // Always shut down the channel after use, to reduce server congestion and 'application hanging'.
      channel.shutdown();
    }
  }


  @Transactional
  @Override
  public List<AnimalPart> readAnimalPartsByPartTypeId(long partTypeId) throws NotFoundException {
    // Create a managed channel to connect to the gRPC server:
    ManagedChannel channel = channel();

    try {
      // Create a BlockingStub, which is auto-generated by the proto file, and in essence is the client connection manager!
      AnimalPartServiceGrpc.AnimalPartServiceBlockingStub animalPartStub = AnimalPartServiceGrpc.newBlockingStub(channel);

      // Prompt gRPC to retrieve the AnimalParts from Database:
      AnimalPartsData animalPartsData = animalPartStub.readAnimalPartsByPartTypeId(LongId_ToGrpc_Id.convertToPartTypeId(partTypeId));

      // Read each entity individually (should be using the cached version now), to get all the proper entity relations:
      List<AnimalPart> animalParts = new ArrayList<>();
      for (AnimalPart animalPart : GrpcAnimalPartData_To_AnimalPart.convertToAnimalPartList(animalPartsData))
        animalParts.add(readAnimalPart(animalPart.getPart_id()));

      return animalParts;

    } catch (StatusRuntimeException e) {
      if(e.getStatus().getCode().equals(NOT_FOUND.getCode()))
        throw new NotFoundException("No AnimalParts associated with partType_Id '" + partTypeId + "' found in database");
      else
        throw new RuntimeException("Critical Error encountered. Failed to Query for all AnimalParts associated with partType_Id '" + partTypeId + "' from the Database (" + e.getMessage() + ")");
    } finally {
      // Always shut down the channel after use, to reduce server congestion and 'application hanging'.
      channel.shutdown();
    }
  }


  @Transactional
  @Override
  public List<AnimalPart> readAnimalPartsByProductId(long productId) throws NotFoundException {
    // Create a managed channel to connect to the gRPC server:
    ManagedChannel channel = channel();

    try {
      // Create a BlockingStub, which is auto-generated by the proto file, and in essence is the client connection manager!
      AnimalPartServiceGrpc.AnimalPartServiceBlockingStub animalPartStub = AnimalPartServiceGrpc.newBlockingStub(channel);

      // Prompt gRPC to retrieve the AnimalParts from Database:
      AnimalPartsData animalPartsData = animalPartStub.readAnimalPartsByProductId(LongId_ToGrpc_Id.convertToProductId(productId));

      // Read each entity individually (should be using the cached version now), to get all the proper entity relations:
      List<AnimalPart> animalParts = new ArrayList<>();
      for (AnimalPart animalPart : GrpcAnimalPartData_To_AnimalPart.convertToAnimalPartList(animalPartsData))
        animalParts.add(readAnimalPart(animalPart.getPart_id()));

      return animalParts;

    } catch (StatusRuntimeException e) {
      if(e.getStatus().getCode().equals(NOT_FOUND.getCode()))
        throw new NotFoundException("No AnimalParts associated with product_Id '" + productId + "' found in database");
      else
        throw new RuntimeException("Critical Error encountered. Failed to Query for all AnimalParts associated with product_Id '" + productId + "' from the Database (" + e.getMessage() + ")");
    } finally {
      // Always shut down the channel after use, to reduce server congestion and 'application hanging'.
      channel.shutdown();
    }
  }


  @Transactional
  @Override
  public List<AnimalPart> readAnimalPartsByTrayId(long trayId) throws NotFoundException {
    // Create a managed channel to connect to the gRPC server:
    ManagedChannel channel = channel();

    try {
      // Create a BlockingStub, which is auto-generated by the proto file, and in essence is the client connection manager!
      AnimalPartServiceGrpc.AnimalPartServiceBlockingStub animalPartStub = AnimalPartServiceGrpc.newBlockingStub(channel);

      // Prompt gRPC to retrieve the AnimalParts from Database:
      AnimalPartsData animalPartsData = animalPartStub.readAnimalPartsByTrayId(LongId_ToGrpc_Id.convertToTrayId(trayId));

      // Read each entity individually (should be using the cached version now), to get all the proper entity relations:
      List<AnimalPart> animalParts = new ArrayList<>();
      for (AnimalPart animalPart : GrpcAnimalPartData_To_AnimalPart.convertToAnimalPartList(animalPartsData))
        animalParts.add(readAnimalPart(animalPart.getPart_id()));

      return animalParts;

    } catch (StatusRuntimeException e) {
      if(e.getStatus().getCode().equals(NOT_FOUND.getCode()))
        throw new NotFoundException("No AnimalParts associated with tray_Id '" + trayId + "' found in database");
      else
        throw new RuntimeException("Critical Error encountered. Failed to Query for all AnimalParts associated with tray_Id '" + trayId + "' from the Database (" + e.getMessage() + ")");
    } finally {
      // Always shut down the channel after use, to reduce server congestion and 'application hanging'.
      channel.shutdown();
    }
  }


  @Transactional
  @Override
  public void updateAnimalPart(AnimalPart data) throws UpdateFailedException, NotFoundException {
    // Create a managed channel to connect to the gRPC server:
    ManagedChannel channel = channel();

    try {
      // Create a BlockingStub, which is auto-generated by the proto file, and in essence is the client connection manager!
      AnimalPartServiceGrpc.AnimalPartServiceBlockingStub animalPartStub = AnimalPartServiceGrpc.newBlockingStub(channel);

      // Create a gRPC compatible version of AnimalPart (Convert AnimalPart to UpdatedAnimalPartData)
      AnimalPartData updateData = AnimalPart_ToGrpc_AnimalPartData.convertToAnimalPartData(data);

      // Prompt gRPC to update the Animal:
      EmptyMessage updated = animalPartStub.updateAnimalPart(updateData);

      if(updated == null && updateData != null)
        throw new UpdateFailedException("Failed to update AnimalPart with id '" + data.getPart_id() + "'");

    } catch (StatusRuntimeException e) {
      if(e.getStatus().getCode().equals(NOT_FOUND.getCode()))
        throw new NotFoundException("No AnimalPart found with id '" + data.getPart_id() + "'");

      if(e.getStatus().equals(INTERNAL))
        throw new UpdateFailedException("Critical Error encountered. Failed to Update AnimalPart with id '" + data.getPart_id() + "' (" + e.getMessage() + ")");
    } finally {
      // Always shut down the channel after use, to reduce server congestion and 'application hanging'.
      channel.shutdown();
    }
  }


  @Transactional
  @Override
  public boolean removeAnimalPart(AnimalPart data) throws DeleteFailedException, NotFoundException {
    // Create a managed channel to connect to the gRPC server:
    ManagedChannel channel = channel();

    try {
      // Create a BlockingStub, which is auto-generated by the proto file, and in essence is the client connection manager!
      AnimalPartServiceGrpc.AnimalPartServiceBlockingStub animalPartStub = AnimalPartServiceGrpc.newBlockingStub(channel);

      // Attempt to find an Animal with the given animal_id:
      AnimalPart animalPart = readAnimalPart(data.getPart_id());

      // Create a gRPC compatible version of AnimalPart (Convert AnimalPart to AnimalPartData)
      AnimalPartData animalPartData = AnimalPart_ToGrpc_AnimalPartData.convertToAnimalPartData(animalPart);

      // Prompt gRPC to delete the AnimalPart:
      EmptyMessage deleted = animalPartStub.removeAnimalPart(animalPartData);

      if(deleted == null && animalPart != null)
        throw new DeleteFailedException("Failed to delete AnimalPart with id '" + data.getPart_id() + "'");

      return true;
    } catch (StatusRuntimeException e) {
      if(e.getStatus().getCode().equals(NOT_FOUND.getCode()))
        throw new NotFoundException("No AnimalPart found with id '" + data.getPart_id() + "'");
      else
        throw new DeleteFailedException("Critical Error encountered. Failed to deleted AnimalPart with id '" + data.getPart_id() + "' (" + e.getMessage() + ")");
    }
    finally {
      // Always shut down the channel after use, to reduce server congestion and 'application hanging'.
      channel.shutdown();
    }
  }


  @Transactional
  @Override
  public List<AnimalPart> getAllAnimalParts() throws NotFoundException {
    // Create a managed channel to connect to the gRPC server:
    ManagedChannel channel = channel();

    try {
      // Create a BlockingStub, which is auto-generated by the proto file, and in essence is the client connection manager!
      AnimalPartServiceGrpc.AnimalPartServiceBlockingStub animalPartStub = AnimalPartServiceGrpc.newBlockingStub(channel);

      // Prompt gRPC to retrieve the AnimalParts from Database:
      AnimalPartsData animalPartsData = animalPartStub.getAnimalParts(GrpcFactory.buildGrpcEmptyMessage());

      // Read each entity individually (should be using the cached version now), to get all the proper entity relations:
      List<AnimalPart> animalParts = new ArrayList<>();
      for (AnimalPart animalPart : GrpcAnimalPartData_To_AnimalPart.convertToAnimalPartList(animalPartsData))
        animalParts.add(readAnimalPart(animalPart.getPart_id()));

      return animalParts;

    } catch (StatusRuntimeException e) {
      if(e.getStatus().getCode().equals(NOT_FOUND.getCode()))
        throw new NotFoundException("No AnimalParts found in database");
      else
        throw new RuntimeException("Critical Error encountered. Failed to Query for all AnimalParts from the Database (" + e.getMessage() + ")");
    } finally {
      // Always shut down the channel after use, to reduce server congestion and 'application hanging'.
      channel.shutdown();
    }
  }
}
