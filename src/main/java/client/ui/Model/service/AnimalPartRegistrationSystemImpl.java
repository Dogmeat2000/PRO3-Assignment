package client.ui.Model.service;

import client.interfaces.AnimalPartRegistrationSystem;
import client.ui.Model.adapters.gRPC_to_java.GrpcAnimalPartData_To_AnimalPartDto;
import client.ui.Model.adapters.java_to_gRPC.AnimalPartDto_ToGrpc_AnimalPartData;
import grpc.*;
import io.grpc.ManagedChannel;
import io.grpc.StatusRuntimeException;
import client.ui.Model.adapters.GrpcFactory;
import shared.model.adapters.java_to_gRPC.LongId_ToGrpc_Id;
import shared.model.dto.AnimalDto;
import shared.model.dto.AnimalPartDto;
import shared.model.dto.PartTypeDto;
import shared.model.dto.TrayDto;
import shared.model.exceptions.persistance.CreateFailedException;
import shared.model.exceptions.persistance.DeleteFailedException;
import shared.model.exceptions.persistance.NotFoundException;
import shared.model.exceptions.persistance.UpdateFailedException;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import static io.grpc.Status.INTERNAL;
import static io.grpc.Status.NOT_FOUND;

public class AnimalPartRegistrationSystemImpl extends Client implements AnimalPartRegistrationSystem
{
  private final GrpcAnimalPartData_To_AnimalPartDto grpcAnimalPartDataConverter = new GrpcAnimalPartData_To_AnimalPartDto();
  private final AnimalPartDto_ToGrpc_AnimalPartData animalPartConverter = new AnimalPartDto_ToGrpc_AnimalPartData();


  public AnimalPartRegistrationSystemImpl(String host, int port) {
    super(host, port);
  }


  @Override
  public AnimalPartDto registerNewAnimalPart(AnimalDto animal, PartTypeDto type, TrayDto tray, BigDecimal weightInKilogram) throws CreateFailedException {
    // Create a managed channel to connect to the gRPC server:
    ManagedChannel channel = channel();

    try {
      // Create a BlockingStub, which is auto-generated by the proto file, and in essence is the client connection manager!
      AnimalPartServiceGrpc.AnimalPartServiceBlockingStub animalPartStub = AnimalPartServiceGrpc.newBlockingStub(channel);

      // Create a gRPC compatible version of AnimalPart (AnimalPartData)
      AnimalPartData data = GrpcFactory.buildGrpcAnimalPartData(1, animal, type, tray, weightInKilogram);

      // Prompt gRPC to register the AnimalPart:
      AnimalPartData createdAnimalPartData = animalPartStub.registerAnimalPart(data);

      return grpcAnimalPartDataConverter.convertToAnimalPartDto(createdAnimalPartData);

    } catch (StatusRuntimeException e) {
      throw new CreateFailedException("Failed to register AnimalPart with weight '" + weightInKilogram + "' (" + e.getMessage() + ")");
    } finally {
      // Always shut down the channel after use, to reduce server congestion and 'application hanging'.
      channel.shutdown();
    }
  }


  @Override
  public AnimalPartDto readAnimalPart(long animalPartId) throws NotFoundException {
    // Create a managed channel to connect to the gRPC server:
    ManagedChannel channel = channel();

    try {
      // Create a BlockingStub, which is auto-generated by the proto file, and in essence is the client connection manager!
      AnimalPartServiceGrpc.AnimalPartServiceBlockingStub animalPartStub = AnimalPartServiceGrpc.newBlockingStub(channel);

      // Create a gRPC compatible version of AnimalPart (AnimalPartId):
      AnimalPartId id = LongId_ToGrpc_Id.convertToAnimalPartId(animalPartId);

      // Prompt gRPC to read the AnimalPart:
      AnimalPartData foundAnimalPart = animalPartStub.readAnimalPart(id);

      // Convert the AnimalData that was read from the DB into a java compatible format:
      return grpcAnimalPartDataConverter.convertToAnimalPartDto(foundAnimalPart);

    } catch (StatusRuntimeException e) {
      throw new NotFoundException("No animalPart found with id '" + animalPartId + "' (" + e.getMessage() + ")");
    } finally {
      // Always shut down the channel after use, to reduce server congestion and 'application hanging'.
      channel.shutdown();
    }
  }


  @Override
  public List<AnimalPartDto> readAnimalPartsByAnimalId(long animalId) throws NotFoundException {
    // Create a managed channel to connect to the gRPC server:
    ManagedChannel channel = channel();

    try {
      // Create a BlockingStub, which is auto-generated by the proto file, and in essence is the client connection manager!
      AnimalPartServiceGrpc.AnimalPartServiceBlockingStub animalPartStub = AnimalPartServiceGrpc.newBlockingStub(channel);

      // Prompt gRPC to retrieve the AnimalParts from Database:
      AnimalPartsData animalPartsData = animalPartStub.readAnimalPartsByAnimalId(LongId_ToGrpc_Id.convertToAnimalId(animalId));

      // Read each entity individually (should be using the cached version now), to get all the proper entity relations:
      return new ArrayList<>(grpcAnimalPartDataConverter.convertToAnimalPartDtoList(animalPartsData));

    } catch (StatusRuntimeException e) {
      if(e.getStatus().getCode().equals(NOT_FOUND.getCode()))
        throw new NotFoundException("No AnimalParts associated with animal_id '" + animalId + "' found in database");
      else
        throw new RuntimeException("Critical Error encountered. Failed to Query for all AnimalParts associated with animal_id '" + animalId + "' from the Database (" + e.getMessage() + ")");
    } finally {
      // Always shut down the channel after use, to reduce server congestion and 'application hanging'.
      channel.shutdown();
    }
  }


  @Override
  public List<AnimalPartDto> readAnimalPartsByPartTypeId(long partTypeId) throws NotFoundException {
    // Create a managed channel to connect to the gRPC server:
    ManagedChannel channel = channel();

    try {
      // Create a BlockingStub, which is auto-generated by the proto file, and in essence is the client connection manager!
      AnimalPartServiceGrpc.AnimalPartServiceBlockingStub animalPartStub = AnimalPartServiceGrpc.newBlockingStub(channel);

      // Prompt gRPC to retrieve the AnimalParts from Database:
      AnimalPartsData animalPartsData = animalPartStub.readAnimalPartsByPartTypeId(LongId_ToGrpc_Id.convertToPartTypeId(partTypeId));

      // Read each entity individually (should be using the cached version now), to get all the proper entity relations:
      return new ArrayList<>(grpcAnimalPartDataConverter.convertToAnimalPartDtoList(animalPartsData));

    } catch (StatusRuntimeException e) {
      if(e.getStatus().getCode().equals(NOT_FOUND.getCode()))
        throw new NotFoundException("No AnimalParts associated with partType_Id '" + partTypeId + "' found in database");
      else
        throw new RuntimeException("Critical Error encountered. Failed to Query for all AnimalParts associated with partType_Id '" + partTypeId + "' from the Database (" + e.getMessage() + ")");
    } finally {
      // Always shut down the channel after use, to reduce server congestion and 'application hanging'.
      channel.shutdown();
    }
  }


  @Override
  public List<AnimalPartDto> readAnimalPartsByProductId(long productId) throws NotFoundException {
    // Create a managed channel to connect to the gRPC server:
    ManagedChannel channel = channel();

    try {
      // Create a BlockingStub, which is auto-generated by the proto file, and in essence is the client connection manager!
      AnimalPartServiceGrpc.AnimalPartServiceBlockingStub animalPartStub = AnimalPartServiceGrpc.newBlockingStub(channel);

      // Prompt gRPC to retrieve the AnimalParts from Database:
      AnimalPartsData animalPartsData = animalPartStub.readAnimalPartsByProductId(LongId_ToGrpc_Id.convertToProductId(productId));

      // Read each entity individually (should be using the cached version now), to get all the proper entity relations:
      return new ArrayList<>(grpcAnimalPartDataConverter.convertToAnimalPartDtoList(animalPartsData));

    } catch (StatusRuntimeException e) {
      if(e.getStatus().getCode().equals(NOT_FOUND.getCode()))
        throw new NotFoundException("No AnimalParts associated with product_Id '" + productId + "' found in database");
      else
        throw new RuntimeException("Critical Error encountered. Failed to Query for all AnimalParts associated with product_Id '" + productId + "' from the Database (" + e.getMessage() + ")");
    } finally {
      // Always shut down the channel after use, to reduce server congestion and 'application hanging'.
      channel.shutdown();
    }
  }


  @Override
  public List<AnimalPartDto> readAnimalPartsByTrayId(long trayId) throws NotFoundException {
    // Create a managed channel to connect to the gRPC server:
    ManagedChannel channel = channel();

    try {
      // Create a BlockingStub, which is auto-generated by the proto file, and in essence is the client connection manager!
      AnimalPartServiceGrpc.AnimalPartServiceBlockingStub animalPartStub = AnimalPartServiceGrpc.newBlockingStub(channel);

      // Prompt gRPC to retrieve the AnimalParts from Database:
      AnimalPartsData animalPartsData = animalPartStub.readAnimalPartsByTrayId(LongId_ToGrpc_Id.convertToTrayId(trayId));

      // Read each entity individually (should be using the cached version now), to get all the proper entity relations:
      return new ArrayList<>(grpcAnimalPartDataConverter.convertToAnimalPartDtoList(animalPartsData));

    } catch (StatusRuntimeException e) {
      if(e.getStatus().getCode().equals(NOT_FOUND.getCode()))
        throw new NotFoundException("No AnimalParts associated with tray_Id '" + trayId + "' found in database");
      else
        throw new RuntimeException("Critical Error encountered. Failed to Query for all AnimalParts associated with tray_Id '" + trayId + "' from the Database (" + e.getMessage() + ")");
    } finally {
      // Always shut down the channel after use, to reduce server congestion and 'application hanging'.
      channel.shutdown();
    }
  }


  @Override
  public void updateAnimalPart(AnimalPartDto data) throws UpdateFailedException, NotFoundException {
    // Create a managed channel to connect to the gRPC server:
    ManagedChannel channel = channel();

    try {
      // Create a BlockingStub, which is auto-generated by the proto file, and in essence is the client connection manager!
      AnimalPartServiceGrpc.AnimalPartServiceBlockingStub animalPartStub = AnimalPartServiceGrpc.newBlockingStub(channel);

      // Create a gRPC compatible version of AnimalPart (Convert AnimalPart to UpdatedAnimalPartData)
      AnimalPartData updateData = animalPartConverter.convertToAnimalPartData(data);

      // Prompt gRPC to update the Animal:
      EmptyMessage updated = animalPartStub.updateAnimalPart(updateData);

      if(updated == null && updateData != null)
        throw new UpdateFailedException("Failed to update AnimalPart with id '" + data.getPartId() + "'");

    } catch (StatusRuntimeException e) {
      if(e.getStatus().getCode().equals(NOT_FOUND.getCode()))
        throw new NotFoundException("No AnimalPart found with id '" + data.getPartId() + "'");

      if(e.getStatus().equals(INTERNAL))
        throw new UpdateFailedException("Critical Error encountered. Failed to Update AnimalPart with id '" + data.getPartId() + "' (" + e.getMessage() + ")");
    } finally {
      // Always shut down the channel after use, to reduce server congestion and 'application hanging'.
      channel.shutdown();
    }
  }


  @Override
  public boolean removeAnimalPart(AnimalPartDto data) throws DeleteFailedException, NotFoundException {
    // Create a managed channel to connect to the gRPC server:
    ManagedChannel channel = channel();

    try {
      // Create a BlockingStub, which is auto-generated by the proto file, and in essence is the client connection manager!
      AnimalPartServiceGrpc.AnimalPartServiceBlockingStub animalPartStub = AnimalPartServiceGrpc.newBlockingStub(channel);

      // Attempt to find an Animal with the given animal_id:
      AnimalPartDto animalPart = readAnimalPart(data.getPartId());

      // Create a gRPC compatible version of AnimalPart (Convert AnimalPart to AnimalPartData)
      AnimalPartData animalPartData = animalPartConverter.convertToAnimalPartData(animalPart);

      // Prompt gRPC to delete the AnimalPart:
      EmptyMessage deleted = animalPartStub.removeAnimalPart(animalPartData);

      if(deleted == null && animalPart != null)
        throw new DeleteFailedException("Failed to delete AnimalPart with id '" + data.getPartId() + "'");

      return true;
    } catch (StatusRuntimeException e) {
      if(e.getStatus().getCode().equals(NOT_FOUND.getCode()))
        throw new NotFoundException("No AnimalPart found with id '" + data.getPartId() + "'");
      else {
        throw new DeleteFailedException("Critical Error encountered. Failed to delete AnimalPart with id '" + data.getPartId() + "' (" + e.getMessage() + ")");
      }
    }
    finally {
      // Always shut down the channel after use, to reduce server congestion and 'application hanging'.
      channel.shutdown();
    }
  }


  @Override
  public List<AnimalPartDto> getAllAnimalParts() throws NotFoundException {
    // Create a managed channel to connect to the gRPC server:
    ManagedChannel channel = channel();

    try {
      // Create a BlockingStub, which is auto-generated by the proto file, and in essence is the client connection manager!
      AnimalPartServiceGrpc.AnimalPartServiceBlockingStub animalPartStub = AnimalPartServiceGrpc.newBlockingStub(channel);

      // Prompt gRPC to retrieve the AnimalParts from Database:
      AnimalPartsData animalPartsData = animalPartStub.getAnimalParts(GrpcFactory.buildGrpcEmptyMessage());

      // Read each entity individually (should be using the cached version now), to get all the proper entity relations:
      return new ArrayList<>(grpcAnimalPartDataConverter.convertToAnimalPartDtoList(animalPartsData));

    } catch (StatusRuntimeException e) {
      if(e.getStatus().getCode().equals(NOT_FOUND.getCode()))
        throw new NotFoundException("No AnimalParts found in database");
      else
        throw new RuntimeException("Critical Error encountered. Failed to Query for all AnimalParts from the Database (" + e.getMessage() + ")");
    } finally {
      // Always shut down the channel after use, to reduce server congestion and 'application hanging'.
      channel.shutdown();
    }
  }
}
