package client.service;

import client.interfaces.AnimalRegistrationSystem;
import grpc.AnimalData;
import grpc.SlaughterHouseServiceGrpc;
import io.grpc.ManagedChannel;
import server.controller.grpc.GrpcAnimalDataToAnimal;
import server.controller.grpc.GrpcFactory;
import shared.model.entities.Animal;

import java.math.BigDecimal;
import java.util.List;
import java.util.concurrent.TimeUnit;

public class Station1_AnimalRegistration extends Client implements AnimalRegistrationSystem
{
  public Station1_AnimalRegistration(String host, int port) {
    super(host, port);
  }

  @Override public Animal registerNewAnimal(BigDecimal weightInKilogram) throws InterruptedException {
    // Create a managed channel to connect to the gRPC server:
    ManagedChannel channel = channel();

    try {
      // Create a BlockingStub, which is auto-generated by the proto file, and in essence is the client connection manager!
      SlaughterHouseServiceGrpc.SlaughterHouseServiceBlockingStub stub = SlaughterHouseServiceGrpc.newBlockingStub(channel);

      // Create a Database compatible version of Animal (AnimalData)
      AnimalData data = GrpcFactory.buildGrpcAnimal(weightInKilogram);

      // Prompt gRPC to register the Animal:
      AnimalData createdAnimal = stub.registerAnimal(data);

      // Convert, and return, the AnimalData that was added to the DB into an application compatible format:
      return GrpcAnimalDataToAnimal.convertToAnimal(createdAnimal);

    } finally {
      // Always shut down the channel after use, to reduce server congestion and 'application hanging'.
      channel.shutdown().awaitTermination(5, TimeUnit.SECONDS);;
    }
  }

  @Override public Animal readAnimal(String animalId) {
    //TODO MISSING IMPLEMENTATION
    return null;
  }

  @Override public int updateAnimal(Animal data) {
    //TODO MISSING IMPLEMENTATION
    return 0;
  }

  @Override public int removeAnimal(Animal data) {
    //TODO MISSING IMPLEMENTATION
    return 0;
  }

  @Override public List<Animal> getAllAnimals() {
    //TODO MISSING IMPLEMENTATION
    return List.of();
  }
}
