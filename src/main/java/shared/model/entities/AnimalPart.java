package shared.model.entities;

import jakarta.persistence.*;
import server.repository.JPA_CompositeKeys.AnimalPartId;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Objects;


// Find the Spring Boot database documentation here: (https://docs.spring.io/spring-boot/reference/data/sql.html)
// Good guide on JPA here: https://www.infoworld.com/article/2259742/java-persistence-with-jpa-and-hibernate-part-1-entities-and-relationships.html
// Find a good manual on how to use Spring Boot with JPA Database management here: https://medium.com/@bubu.tripathy/best-practices-entity-class-design-with-jpa-and-spring-boot-6f703339ab3d
@Entity // Assigns this class as an Entity for Spring Boot, to use as a base for its Data Persistance interface.
@IdClass(AnimalPartId.class) // Tells Spring Boot JPA that this class uses a Composite Primary Key, and that the details for the key should follow 'AnimalPartId' class in the JPA_CompositeKeys packaged.
@Table(name="animalpart") // Tells spring boot JPA, what the name of this database table is.
public class AnimalPart implements Serializable
{
  @Id // Tells Spring Boot, that this value is part of the primary key.
  @GeneratedValue (strategy = GenerationType.SEQUENCE, generator = "animal_part_id_generator")  // Tells Spring Boot, that the primary key is generated by the database, using a sequence, and defines the specific generator in the database to utilize.
  @SequenceGenerator(name = "animal_part_id_generator", sequenceName = "animalpart_part_id_seq", allocationSize = 1) // Read documentation here: https://javabeat.net/jpa-annotations-generatedvalue-sequencegenerator-tablegenerator/
  private long part_id;


  @Id // Tells Spring Boot, that this value is part of the primary key.
  @Column(name = "animal_id", nullable = false)
  private long animal_id; // Primitive type primary keys must be explicitly stated as defined in the @IdClass, when dealing with Entities with Composite Keys!


  @Id // Tells Spring Boot, that this value is part of the primary key.
  @Column(name = "type_id", nullable = false)
  private long type_id; // Primitive type primary keys must be explicitly stated as defined in the @IdClass, when dealing with Entities with Composite Keys!


  @Id // Tells Spring Boot, that this value is part of the primary key.
  @Column(name = "tray_id", nullable = false)
  private long tray_id; // Primitive type primary keys must be explicitly stated as defined in the @IdClass, when dealing with Entities with Composite Keys!


  @Column(nullable=false) // Tells Spring Boot, that this is a column in the database, and that it cannot be null.
  private BigDecimal weight_kilogram;


  // @ManyToOne Tells Spring Boot, that this database entity has a ManyToOne relationship with the Animal entity,
  // and that the Animal entity should NOT 'own' the mapping. In other words, the animal_id assigned inside this 'AnimalPart' entity should be prioritized.
  // This makes logical sense, since it is from within this AnimalPart class that references to the Animal are stored as Foreign Keys, and not in the Animal entity!
  @ManyToOne
  @JoinColumn(name="animal_id", nullable=false, insertable = false, updatable = false) // Tells Spring Boot which DB column to use in the Animal entity when joining tables.
  private Animal animal;


  // @ManyToOne Tells Spring Boot, that this database entity has a ManyToOne relationship with the PartType entity,
  // and that the PartType entity should NOT 'own' the mapping. In other words, the type_id assigned inside this 'AnimalPart' entity should be prioritized.
  // This makes logical sense, since it is from within this AnimalPart class that references to the PartType are stored as Foreign Keys, and not in the PartType entity!
  @ManyToOne
  @JoinColumn(name="type_id", nullable = false, insertable = false, updatable = false)  // Tells Spring Boot which DB column to use in the PartType entity when joining tables.
  private PartType type;


  // @ManyToOne Tells Spring Boot, that this database entity has a ManyToOne relationship with the Tray entity,
  // and that the Tray entity should NOT 'own' the mapping. In other words, the tray assigned inside this 'AnimalPart' entity should be prioritized.
  // This makes logical sense, since it is from within this AnimalPart class that references to the Tray are stored as Foreign Keys, and not in the Tray entity!
  @ManyToOne
  @JoinColumn(name="tray_id", nullable=false, insertable = false, updatable = false) // Tells Spring Boot which DB column to use in the Tray entity when joining tables.
  private Tray tray;


  // @ManyToOne Tells Spring Boot, that this database entity has a ManyToOne relationship with the Tray entity,
  // and that the Product entity should NOT 'own' the mapping. In other words, the product assigned inside this 'AnimalPart' entity should be prioritized.
  // This makes logical sense, since it is from within this AnimalPart class that references to the Product are stored as Foreign Keys, and not in the Product entity!
  @ManyToOne
  @JoinColumn(name="product_id", nullable=false) // Tells Spring Boot which DB column to use in the Product entity when joining tables.
  private Product product;


  // A no-args constructor, as required by the Java Data API (JPA) specifications. Should not be used directly, thus protected!
  protected AnimalPart() {
    //Note: Do not set the part_id here, since JPA auto-sets this by using the database.
    setWeight_kilogram(BigDecimal.valueOf(0));
    setAnimal(animal);
    setTray(tray);
    setType(type);
    setProduct(product);
  }


  public AnimalPart(Long part_id, BigDecimal weight_kilogram, PartType type, Animal animal, Tray tray, Product product) {
    setPart_id(part_id);
    setWeight_kilogram(weight_kilogram);
    setAnimal(animal);
    setTray(tray);
    setType(type);
    setTray(tray);
    setProduct(product);
  }


  public long getAnimal_id() {
    return animal_id;
  }

  public void setAnimal_id(long animal_id) {
    this.animal_id = animal_id;
  }

  public long getType_id() {
    return type_id;
  }

  public void setType_id(long type_id) {
    this.type_id = type_id;
  }

  public long getTray_id() {
    return tray_id;
  }

  public void setTray_id(long tray_id) {
    this.tray_id = tray_id;
  }

  public BigDecimal getWeight_kilogram() {
    return weight_kilogram;
  }


  public void setWeight_kilogram(BigDecimal weight) {
    this.weight_kilogram = weight;
  }


  public long getPart_id() {
    return part_id;
  }


  public void setPart_id(long part_Id) {
    this.part_id = part_Id;
  }


  public Animal getAnimal() {
    return animal;
  }


  public void setAnimal(Animal animal) {
    this.animal = animal;
    setAnimal_id(animal.getId());
  }


  public Tray getTray() {
    return tray;
  }


  public void setTray(Tray tray) {
    this.tray = tray;
    setTray_id(tray.getTray_id());
  }


  public Product getProduct() {
    return product;
  }


  public void setProduct(Product product) {
    this.product = product;
  }

  public PartType getType() {
    return type;
  }

  public void setType(PartType partType) {
    this.type = partType;
    setType_id(partType.getTypeId());
  }


  // TODO: Update/Review equals, toString and hashcode methods
  // Required by Spring Boot JPA:
  @Override public boolean equals(Object o) {
    if (o == null || this.getClass() != o.getClass())
      return false;

    return Objects.equals(getWeight_kilogram(), ((AnimalPart) o).getWeight_kilogram())
        && Objects.equals(getPart_id(), ((AnimalPart) o).getPart_id())
        && Objects.equals(getAnimal(), ((AnimalPart) o).getAnimal())
        && Objects.equals(getTray(), ((AnimalPart) o).getTray())
        && Objects.equals(getProduct(), ((AnimalPart) o).getProduct())
        && Objects.equals(getType(), ((AnimalPart) o).getType());
  }


  // Required by Spring Boot JPA:
  @Override public int hashCode() {
    return Objects.hash(getPart_id(), getWeight_kilogram(), getAnimal(), getTray());
  }


  @Override public String toString() {
    return "AnimalPart{" + "weight=" + weight_kilogram + ", part_Id='" + part_id + '\'' + ", animal=" + animal + '}';
  }


  public AnimalPart copy() {
    AnimalPart animalPartCopy = new AnimalPart();
    animalPartCopy.setPart_id(getPart_id());
    animalPartCopy.setWeight_kilogram(getWeight_kilogram());
    animalPartCopy.setAnimal(getAnimal());
    animalPartCopy.setType(getType());
    animalPartCopy.setTray(getTray());
    animalPartCopy.setProduct(getProduct());

    return animalPartCopy;
  }
}
