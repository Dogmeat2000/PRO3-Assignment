package shared.model.entities;

import jakarta.persistence.*;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;


// Find the Spring Boot database documentation here: (https://docs.spring.io/spring-boot/reference/data/sql.html)
// Good guide on JPA here: https://www.infoworld.com/article/2259742/java-persistence-with-jpa-and-hibernate-part-1-entities-and-relationships.html
// Find a good manual on how to use Spring Boot with JPA Database management here: https://medium.com/@bubu.tripathy/best-practices-entity-class-design-with-jpa-and-spring-boot-6f703339ab3d
@Entity // Assigns this class as an Entity for Spring Boot, to use as a base for its Data Persistance interface.
@Table(name="product") // Tells spring boot JPA, what the name of this database table is.
public class Product implements Serializable
{
  @Id                                                   // Tells Spring Boot, that this value is part of the primary key.
  @GeneratedValue (strategy = GenerationType.SEQUENCE, generator = "product_id_generator")  // Tells Spring Boot, that the primary key is generated by the database, using a sequence, and defines the specific generator in the database to utilize.
  @SequenceGenerator(name = "product_id_generator", sequenceName = "product_product_id_seq", allocationSize = 1) // Read documentation here: https://javabeat.net/jpa-annotations-generatedvalue-sequencegenerator-tablegenerator/
  private long productId;


  // @OneToMany Tells Spring Boot, that this database entity has a OneToMany relationship with the AnimalPart entity,
  // and that the AnimalPart entity should 'own' the mapping (using the product attribute in its class). In other words, the product_id assigned in the 'AnimalPart' entity should be prioritized.
  // This makes logical sense, since it is from within the AnimalPart class that references to the Product are stored in the DB between AnimalPart and Product.
  @OneToMany(mappedBy="product", orphanRemoval = true, cascade = CascadeType.ALL, fetch = FetchType.EAGER) //Cascade ensures that JPA applies changes in AnimalPart to all linked classes (incl. this class)
  private List<AnimalPart> contentList;


  // Special Note: JPA works with Database entities as objects, so the join table is here modelled as its own object. This allows for future scalability,
  // where I can decide to add timestamp, etc. to the join table without much change to this code!
  // @OneToMany Tells Spring Boot, that this database entity has a OneToMany relationship with the TrayToProductTransferRepository entity,
  // also that TrayToProductTransferRepository entity should 'own' the mapping (using the product attribute in its class).
  // This makes logical sense, since it is from within the TrayToProductTransferRepository class that references to the Product are stored in the DB, between Product and Tray.
  @OneToMany(mappedBy="product", orphanRemoval = true, cascade = CascadeType.ALL, fetch = FetchType.EAGER)
  private List<TrayToProductTransfer> traySupplyJoinList;


  @Transient
  private List<Long> animalPartIdList = new ArrayList<>();

  @Transient
  private List<Long> transferIdList = new ArrayList<>();

  @Transient
  private List<Tray> traySuppliersList = new ArrayList<>();


  // A no-args constructor, as required by the Java Data API (JPA) specifications. Should not be used directly, thus protected!
  protected Product() {
    //JPA requires this to be blank!
  }


  public Product(long id, List<Long> contentIdList, List<Long> transferIdList) {
    setProductId(id);

    this.animalPartIdList = new ArrayList<>();
    if(contentIdList != null)
      getAnimalPartIdList().addAll(contentIdList);

    this.transferIdList = new ArrayList<>();
    if(transferIdList != null)
      getTransferIdList().addAll(transferIdList);
  }


  public long getProductId() {
    return productId;
  }


  public void setProductId(long product_id) {
    this.productId = product_id;
  }


  public List<AnimalPart> getContentList() {
    if(contentList == null)
      contentList = new ArrayList<>();

    return contentList;
  }

  public void setAnimalParts(List<AnimalPart> animalParts) {
    this.contentList = animalParts;
    // Ensure that all assigned AnimalParts have this Product as the parent:
    for (AnimalPart animalPart : animalParts) {
      animalPart.setProduct(this);
    }
  }

  public void addAnimalPart(AnimalPart animalPart) {
    // Set parent Product to this Product when adding:
    animalPart.setProduct(this);
    this.contentList.add(animalPart);
  }

  public void removeAnimalPart(AnimalPart animalPart) {
    // Set parent Product to NULL when removing.
    this.contentList.remove(animalPart);
    animalPart.setProduct(null);
  }


  public List<Long> getAnimalPartIdList() {
    if(animalPartIdList == null)
      setAnimalPartIdList(animalPartIdList);
    return animalPartIdList;
  }


  public void setAnimalPartIdList(List<Long> animalPartIds) {
    this.animalPartIdList = animalPartIds;
  }


  public List<TrayToProductTransfer> getTraySupplyJoinList() {
    if(traySupplyJoinList == null)
      setTraySupplyJoinList(new ArrayList<>());
    return traySupplyJoinList;
  }

  public void setTraySupplyJoinList(List<TrayToProductTransfer> transferList) {
    if(transferList == null)
      this.traySupplyJoinList = new ArrayList<>();
    else
      this.traySupplyJoinList = transferList;
  }


  public List<Long> getTransferIdList() {
    return transferIdList;
  }


  public void setTransferIdList(List<Long> transferIds) {
    this.transferIdList = transferIds;
  }


  public List<Tray> getTraySuppliersList() {
    if(traySuppliersList == null)
      setTraySuppliersList(new ArrayList<>());
    return traySuppliersList;
  }


  public void setTraySuppliersList(List<Tray> traySuppliersList) {
    this.traySuppliersList = traySuppliersList;
  }


  // TODO: Update/Review equals, toString and hashcode methods
  // Required by Spring Boot JPA:
  @Override public boolean equals(Object o) {
    if (o == null || this.getClass() != o.getClass())
      return false;

    return Objects.equals(getProductId(), ((Product) o).getProductId())
        && Objects.equals(getContentList(), ((Product) o).getContentList()) //TODO Confirm that this equals method also performs equals check on contents.
        && Objects.equals(getTraySupplyJoinList(), ((Product) o).getTraySupplyJoinList()); //TODO Confirm that this equals method also performs equals check on contents.
  }


  // Required by Spring Boot JPA:
  @Override public int hashCode() {
    return Objects.hash(getProductId(), getContentList(), getTraySupplyJoinList());
  }


  // Required by Spring Boot JPA:
  @Override public String toString() {
    String returnValue = "product_id: '"
        + getProductId()
        + "', List of trayId's from which animalParts were provided: [";

    for (TrayToProductTransfer transfer : getTraySupplyJoinList())
      returnValue += transfer.getTray().getTrayId() + ",";

    returnValue += "], List of animalPart_id's contained in this product: [";

    for (AnimalPart animalPart : getContentList())
      returnValue += animalPart.getPart_id() + ",";

    returnValue += "]";

    return returnValue;
  }

  public Product copy() {
    return new Product(getProductId(), getAnimalPartIdList(), getTransferIdList());
  }
}
